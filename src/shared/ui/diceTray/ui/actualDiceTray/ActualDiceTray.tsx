import { Html, OrbitControls, OrthographicCamera } from '@react-three/drei';
import { Canvas } from '@react-three/fiber';
import { useCallback, useEffect, useRef, useState } from 'react';
import uniqid from 'uniqid';

import { DiceType, rollDice } from 'shared/lib';
import { AnimatedDieR3F } from '../../dices';
import { layoutConfigs } from '../../lib';
import { DieInstance } from '../../model';
import { DiceToolbar } from '../diceToolbar';

import s from './ActualDiceTray.module.scss';

const MAX_DICE = 96;
const ANIMATION_DURATION = 500; // ms

export const ActualDiceTray: React.FC = () => {
  const [tray, setTray] = useState<DieInstance[]>([]);
  const [spinFlag, setSpinFlag] = useState(0);
  const [warning, setWarning] = useState<string | null>(null);

  // –î–ª—è –ø–æ–∫–∞–∑–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—É–º–º—ã
  const [settleCount, setSettleCount] = useState(0);
  const [displaySum, setDisplaySum] = useState(0);
  const [animatedSum, setAnimatedSum] = useState(0);
  const oldSumRef = useRef(0);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á—ë—Ç—á–∏–∫–∞
  const animateSum = useCallback((from: number, to: number, delay = 0) => {
    // —Å—Ä–∞–∑—É –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –±—ã–ª–æ from
    setAnimatedSum(from);

    const startAnim = () => {
      const start = performance.now();
      const step = (now: number) => {
        const t = Math.min((now - start) / ANIMATION_DURATION, 1);
        setAnimatedSum(Math.floor(from + (to - from) * t));
        if (t < 1) requestAnimationFrame(step);
      };
      requestAnimationFrame(step);
    };

    if (delay > 0) {
      setTimeout(startAnim, delay);
    } else {
      startAnim();
    }
  }, []);

  const handleAdd = useCallback(
    (type: DiceType) => {
      // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º
      if (tray.length >= MAX_DICE) {
        setWarning(`–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ ${MAX_DICE} –∫–æ—Å—Ç–µ–π`);
        return;
      }
      setWarning(null);

      // 2) –°—Ä–∞–∑—É –≤—ã—á–∏—Å–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫—É–±–∏–∫
      const value = rollDice(type);
      const newDie = { id: uniqid(), type, value, removing: false };

      // 3) –í—Å—Ç–∞–≤–ª—è–µ–º –∫—É–±–∏–∫ –≤ tray
      setTray((prev) => [...prev, newDie]);

      // 4) –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∞–Ω–∏–º–∏—Ä—É–µ–º
      setDisplaySum((prev) => {
        const newSum = prev + value;
        // –∂–¥–µ–º 200 –º—Å, —á—Ç–æ–±—ã –∫–æ—Å—Ç—å —Ç–æ—á–Ω–æ –ª–µ–≥–ª–∞ –≤ —Å—Ü–µ–Ω–µ, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∞–Ω–∏–º–∏—Ä—É–µ–º
        animateSum(prev, newSum, 1200);
        return newSum;
      });
    },
    [tray.length, animateSum],
  );

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫—É–±–∏–∫–∞
  const handleInitRemove = useCallback((id: string) => {
    setWarning(null);
    setTray((prev) => prev.map((d) => (d.id === id ? { ...d, removing: true } : d)));
  }, []);
  const handleFinalizeRemove = useCallback(
    (id: string) => {
      // 1. –í—ã—á–∏—Å–ª—è–µ–º ¬´–Ω–æ–≤—ã–π¬ª –ª–æ—Ç–æ–∫ –∏ ¬´—Å—Ç–∞—Ä—É—é¬ª/¬´–Ω–æ–≤—É—é¬ª —Å—É–º–º—É
      setTray((prevTray) => {
        const newTray = prevTray.filter((d) => d.id !== id);
        const oldSum = displaySum;
        const newSum = newTray.reduce((acc, d) => acc + d.value, 0);

        // 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        setAnimatedSum(oldSum);

        // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        animateSum(oldSum, newSum);

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º ¬´–∏—Å—Ç–∏–Ω–Ω—É—é¬ª —Å—É–º–º—É (–ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –µ—Å–ª–∏ –≤—ã –≥–¥–µ-—Ç–æ –µ—â—ë —á–∏—Ç–∞–µ—Ç–µ displaySum)
        setDisplaySum(newSum);

        return newTray;
      });
    },
    [displaySum, animateSum],
  );

  // –ë—Ä–æ—Å–∞–µ–º –≤—Å–µ –∫—É–±–∏–∫–∏
  const handleRollAll = useCallback(() => {
    setWarning(null);
    // –∑–∞–ø–æ–º–Ω–∏–º —Å—Ç–∞—Ä—É—é —Å—É–º–º—É
    oldSumRef.current = displaySum;
    // —Å–±—Ä–æ—Å–∏–º —Å—á—ë—Ç—á–∏–∫–∏
    setSettleCount(0);
    setDisplaySum(0);
    setAnimatedSum(0);
    // —Å–º–µ–Ω–∏–º —Ñ–ª–∞–≥ –∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
    setSpinFlag((f) => f + 1);
    setTray((prev) => prev.map((d) => ({ ...d, value: rollDice(d.type), removing: false })));
  }, [displaySum]);

  // –ö–æ–≥–¥–∞ –æ–¥–Ω–∞ –∫–æ—Å—Ç—å ¬´–æ—Å–µ–ª–∞¬ª
  const handleDieSettle = useCallback((id: string, settledValue: number) => {
    setTray((prev) => prev.map((d) => (d.id === id ? { ...d, value: settledValue } : d)));
    setSettleCount((c) => c + 1);
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç: –∫–æ–≥–¥–∞ settleCount === tray.length, —Å—á–∏—Ç–∞–µ–º –∏ –∞–Ω–∏–º–∏—Ä—É–µ–º —Å—É–º–º—É
  useEffect(() => {
    if (settleCount === 0) return;
    if (spinFlag === 0) return;
    if (settleCount === tray.length) {
      const sum = tray.reduce((acc, d) => acc + d.value, 0);
      setDisplaySum(sum);
      animateSum(0, sum);
    }
  }, [settleCount, tray, animateSum, spinFlag]);

  useEffect(() => {
    if (tray.length === 0) {
      setSpinFlag(0);
      setDisplaySum(0);
      setAnimatedSum(0);
      oldSumRef.current = 0;
    }
  }, [tray.length]);

  // –í—ã–±–æ—Ä cols –∏ zoom –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∫–∞
  const { cols, zoom } = layoutConfigs.find((c) => tray.length <= c.maxCount)!;

  return (
    <div className={s.container}>
      <DiceToolbar onAdd={handleAdd} onRoll={handleRollAll} />

      {warning && <div className={s.warning}>üì¢ {warning}</div>}

      <div className={s.canvasWrapper}>
        <Canvas style={{ width: '100%', height: '100%', display: 'block' }}>
          <OrthographicCamera makeDefault position={[0, 0, 10]} zoom={zoom} />

          <ambientLight intensity={0.4} />
          <directionalLight position={[5, 5, 5]} intensity={0.8} />

          {tray.map((die, idx) => {
            const col = idx % cols;
            const row = Math.floor(idx / cols);
            const x = (col - (cols - 1) / 2) * 2;
            const y = -(row - (Math.ceil(tray.length / cols) - 1) / 2) * 2;
            return (
              <group key={die.id} position={[x, y, 0]}>
                <AnimatedDieR3F
                  id={die.id}
                  type={die.type}
                  value={die.value}
                  spinFlag={spinFlag}
                  removing={die.removing}
                  onRemoved={handleFinalizeRemove}
                  onSettle={(v) => handleDieSettle(die.id, v)}
                  onClick={() => handleInitRemove(die.id)}
                />
              </group>
            );
          })}

          {/* –í—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞—è —Å—É–º–º–∞, –Ω–æ animatedSum –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
          <Html fullscreen style={{ pointerEvents: 'none' }}>
            <div
              style={{
                position: 'absolute',
                top: 4,
                left: 4,
                padding: '4px 8px',
                background: 'rgba(0,0,0,0.6)',
                color: 'white',
                borderRadius: 4,
                fontSize: '1.4rem',
                userSelect: 'none',
              }}
            >
              –°—É–º–º–∞: {animatedSum}
            </div>
          </Html>

          <OrbitControls enableZoom={false} enableRotate={false} />
        </Canvas>
      </div>
    </div>
  );
};
